diff --git a/lib/oauth2.js b/lib/oauth2.js
index 4713192..e1496e7 100644
--- a/lib/oauth2.js
+++ b/lib/oauth2.js
@@ -21,16 +21,16 @@ exports.OAuth2.prototype.setAccessTokenName= function ( name ) {
   this._accessTokenName= name;
 }
 
-exports.OAuth2.prototype._getAccessTokenUrl= function( params ) {
-  var params= params || {};
-  params['client_id'] = this._clientId;  
-  params['client_secret'] = this._clientSecret;  
-  params['type']= 'web_server';
-  
-  return this._baseSite + this._accessTokenUrl + "?" + querystring.stringify(params);
+exports.OAuth2.prototype._getAccessTokenUrl= function() {
+  return this._baseSite + this._accessTokenUrl; /* + "?" + querystring.stringify(params); */
 }
 
-exports.OAuth2.prototype._request= function(method, url, headers, access_token, callback) {
+// Returns true if this is a host that closes *before* it ends?!?!
+exports.OAuth2.prototype._isAnEarlyCloseHost= function( hostName ) {
+  return hostName.match(".*google.com$")
+}
+
+exports.OAuth2.prototype._request= function(method, url, headers, post_body, access_token, callback) {
 
   var creds = crypto.createCredentials({ });  
   var parsedUrl= URL.parse( url, true );   
@@ -44,40 +44,63 @@ exports.OAuth2.prototype._request= function(method, url, headers, access_token,
   }
   realHeaders['Host']= parsedUrl.host;
 
+  // I imagine this is an efficient cost, but google API just holds the connection open otherwise :(
+  realHeaders['Connection']='close'; 
+
   //TODO: Content length should be dynamic when dealing with POST methods....
-  realHeaders['Content-Length']= 0;
+  realHeaders['Content-Length']= post_body ? Buffer.byteLength(post_body) : 0;
   if( access_token ) {
     if( ! parsedUrl.query ) parsedUrl.query= {};
     parsedUrl.query[this._accessTokenName]= access_token;
   }
 
   var result= "";
-
+  var queryStr= querystring.stringify(parsedUrl.query);
+  if( queryStr ) queryStr=  "?" + queryStr;
   var options = {
     host:parsedUrl.hostname,
     port: parsedUrl.port,
-    path: parsedUrl.pathname + "?" + querystring.stringify(parsedUrl.query),
+    path: parsedUrl.pathname + queryStr,
     method: method,
     headers: realHeaders
   };
-
-  request = https.request(options, function (response) { 
-    response.addListener("data", function (chunk) {
-      result+= chunk
-    });
-    response.addListener("end", function () {
+  
+  // Some hosts *cough* google appear to close the connection early / send no content-length header
+  // allow this behaviour.
+  var allowEarlyClose= this._isAnEarlyCloseHost(options.host);
+  var callbackCalled= false;
+  function passBackControl( response, result ) {
+    if(!callbackCalled) {
+      callbackCalled=true;
       if( response.statusCode != 200 ) {
         callback({ statusCode: response.statusCode, data: result });
       } else {
         callback(null, result, response);
       }
+    }
+  }
+
+  request = https.request(options, function (response) {
+    response.on("data", function (chunk) {
+      result+= chunk
+    });
+    response.on("close", function (err) {
+      if( allowEarlyClose ) {
+        passBackControl( response, result );
+      }
+    });
+    response.addListener("end", function () {
+      passBackControl( response, result );
     });
   });
-
   request.on('error', function(e) {
+    callbackCalled= true;
     callback(e);
   });
 
+  if(  method == 'POST' && post_body ) {
+     request.write(post_body);
+  }
   request.end();
 } 
 
@@ -91,9 +114,19 @@ exports.OAuth2.prototype.getAuthorizeUrl= function( params ) {
 
 exports.OAuth2.prototype.getOAuthAccessToken= function(code, params, callback) {
   var params= params || {};
+  params['client_id'] = this._clientId;  
+  params['client_secret'] = this._clientSecret;
+  params['type']= 'web_server';
   params['code']= code;
+                                 
+  var post_data= querystring.stringify( params );
+  var post_headers= {
+       'Content-Type': 'application/x-www-form-urlencoded'
+   };
+
 
-  this._request("POST", this._getAccessTokenUrl(params), {}, null, function(error, data, response) {
+  this._request("POST", this._getAccessTokenUrl(), post_headers, post_data, null, function(error, data, response) {
+    console.log( 'e> ' + error)
     if( error )  callback(error);
     else {
       var results;
@@ -119,9 +152,9 @@ exports.OAuth2.prototype.getOAuthAccessToken= function(code, params, callback) {
 
 // Deprecated
 exports.OAuth2.prototype.getProtectedResource= function(url, access_token, callback) {
-  this._request("GET", url, {}, access_token, callback );
+  this._request("GET", url, {}, "", access_token, callback );
 }
 
 exports.OAuth2.prototype.get= function(url, access_token, callback) {
-  this._request("GET", url, {}, access_token, callback );
+  this._request("GET", url, {}, "", access_token, callback );
 }
